#+AUTHOR: w8ste
#+STARTUP: showerverything
#+OPTIONS: toc:2
* TABLE OF CONTENTS :toc:
- [[#important-programs][Important programs]]
  - [[#startup-performance][Startup Performance]]
  - [[#package-system][Package System]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#general-settings][General settings]]
- [[#all-the-icons][All the icons]]
- [[#auctex][AUCTex]]
- [[#autopair][Autopair]]
- [[#buffer-move][Buffer-Move]]
- [[#dashboard][Dashboard]]
- [[#diminish][Diminish]]
- [[#dired][Dired]]
- [[#disord-status][Disord status]]
- [[#eshell][Eshell]]
- [[#fonts][FONTS]]
  - [[#settings-the-font-face][Settings The Font Face]]
- [[#flycheck][Flycheck]]
- [[#git-programms][Git Programms]]
  - [[#magit][Magit]]
- [[#gui-settings][GUI Settings]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and truncated Lines]]
- [[#gradle-mode][Gradle-Mode]]
- [[#highlight-indents][Highlight Indents]]
- [[#highlight][Highlight]]
- [[#identation][Identation]]
- [[#ivy-counsel][IVY (Counsel)]]
- [[#language-support][Language Support]]
  - [[#lsp-mode][Lsp mode]]
  - [[#company][Company]]
  - [[#dap-mode][Dap Mode]]
  - [[#treemacs][Treemacs]]
  - [[#java][Java]]
  - [[#python][Python]]
  - [[#system-verilog][System Verilog]]
  - [[#c][C++]]
  - [[#ltex][ltex]]
  - [[#scala][Scala]]
  - [[#dart][Dart]]
- [[#minibuffer-escape][Minibuffer Escape]]
- [[#modeline][Modeline]]
- [[#neotree][Neotree]]
- [[#org-mode][Org Mode]]
  - [[#enable-toc][Enable ToC]]
  - [[#enable-bullet-points][Enable bullet points]]
  - [[#disable-electric-indent][Disable electric indent]]
- [[#pdf-tool][PDF-Tool]]
- [[#perspective][Perspective]]
- [[#projectile][Projectile]]
- [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#rustic-mode][Rustic Mode]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell-1][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#sudo-edit][Sudo Edit]]
- [[#theme][Theme]]
- [[#tldr][TLDR]]
- [[#transparency][Transparency]]
- [[#treesitter][Treesitter]]
- [[#which-key][WHICH-KEY]]
- [[#yasnippet][Yasnippet]]

* Important programs
** Startup Performance
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src
** Package System
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :bind (:map evil-insert-state-map ("C-k" . nil)) 
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  ;; settings keybindings for evil
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-visual-state-map (kbd "C-c") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state)
    (define-key evil-motion-state-map (kbd "C-e") nil)
    (define-key evil-visual-state-map (kbd "C-c") 'evil-exit-visual-state)
    (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
  (keymap-global-set "C-c k" 'kill-line)
  (use-package general
    :config
    (general-evil-setup)
    ;; set up 'SPC' as the global leader key
    (general-create-definer w8ste/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    ;; buffer keybindings
    (w8ste/leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bi" '(ibuffer :wk "Ibuffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")
      "b R" '(rename-buffer :wk "Rename buffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(save-some-buffers :wk "Save multiple buffers") 
      ;; Bookmarks
      "b d" '(bookmark-delete :wk "Delete bookmark")
      "b l" '(list-bookmarks :wk "List bookmarks")
      "b m" '(bookmark-set :wk "Set bookmark"))

    ;; quality of life keybindings
    (w8ste/leader-keys
      "TAB TAB" '(comment-line :wk "Comment lines"))

    (w8ste/leader-keys
      "f" '(:ignore t :wk "Find commands")
      "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
      "f r" '(counsel-recentf :wk "Find recent files")
      "f p" '(flycheck-list-errors :wk "Find errors"))

    ;; navigating through you 
    (w8ste/leader-keys
      "p" '(:ignore :wk "Navigation")'
      "p r" '(counsel-recentf :wk "Find recent files")
      "p f" '(projectile-find-file :wk "Find file in current project")
      "p =" '(perspective-map :wk "Perspective")
      "p e" '(goto-next-locus :wk "Goto next error")
      "p s" '(rgrep :wk "Find regex"))

    ;; eval keybindings
    (w8ste/leader-keys
      "e" '(:ignore t :wk "Evaluate/Eshell")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
      "es" '(eshell :wk "Eshell")
      "eh" '(counsel-esh-history :wk "Eshell history"))

    ;; Dired
    (w8ste/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d j" '(dired-jump :wk "Dired jump to current")
      "d n" '(neotree-dir :wk "Open directory in neotree")
      "d p" '(peep-dired :wk "Peep-dired")) 

    ;; Help keybindigs
    (w8ste/leader-keys
      "h" '(:ignore t :wk "Help")
      "h a" '(counsel-apropos :wk "Apropos")
      "h b" '(describe-bindings :wk "Describe bindings")
      "h c" '(describe-char :wk "Describe character under cursor")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d a" '(about-emacs :wk "About Emacs")
      "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "The Emacs manual")
      "h d n" '(view-emacs-news :wk "View Emacs news")
      "h d o" '(describe-distribution :wk "How to obtain Emacs")
      "h d p" '(view-emacs-problems :wk "View Emacs problems")
      "h d t" '(view-emacs-todo :wk "View Emacs todo")
      "h d w" '(describe-no-warranty :wk "Describe no warranty")
      "h e" '(view-echo-area-messages :wk "View echo area messages")
      "h f" '(describe-function :wk "Describe function")
      "h F" '(describe-face :wk "Describe face")
      "h g" '(describe-gnu-project :wk "Describe GNU Project")
      "h i" '(info :wk "Info")
      "h I" '(describe-input-method :wk "Describe input method")
      "h k" '(describe-key :wk "Describe key")
      "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
      "h L" '(describe-language-environment :wk "Describe language environment")
      "h m" '(describe-mode :wk "Describe mode")
      "h n" '(hackernews :wk "Hackernews")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el")
                  (ignore (elpaca-process-queues)))
                :wk "Reload emacs config")
      "h t" '(load-theme :wk "Load theme")
      "h v" '(describe-variable :wk "Describe variable")
      "h w" '(where-is :wk "Prints keybinding for command if set")
      "h x" '(describe-command :wk "Display full documentation for command"))

    ;; Keybindings for splits
    (w8ste/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))

    (w8ste/leader-keys
      "o" '(:ignore t :wk "Org")
      "o a" '(org-agenda :wk "Org agenda")
      "o e" '(org-export-dispatch :wk "Org export dispatch")
      "o i" '(org-toggle-item :wk "Org toggle item")
      "o t" '(org-todo :wk "Org todo")
      "o l" '(hl-todo-occur :wk "Find all todo's in file")
      "o B" '(org-babel-tangle :wk "Org babel tangle")
      "o T" '(org-todo-list :wk "Org todo list"))

    (w8ste/leader-keys
      "o d" '(:ignore t :wk "Date/deadline")
      "o d t" '(org-time-stamp :wk "Org time stamp"))

    (w8ste/leader-keys
      "o b" '(:ignore t :wk "Tables")
      "o b -" '(org-table-insert-hline :wk "Insert hline in table")
      )

    (w8ste/leader-keys
      "s" '(:ignore t :wk "sbt")
      "s s" '(sbt-start :wk "sbt start"))

    (w8ste/leader-keys
      "m" '(:ignore t :wk "Minimap/Magit")
      "m m" '(minimap-mode :wk "Minimap")
      "m g" '(magit :wk "Magit"))

    (w8ste/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t r" '(rainbow-mode :wk "Toggle rainbow mode")
      "t d" '(tldr :wk "TLDR")
      "t v" '(vterm-toggle :wk "Toggle vterm"))

    ;; NeoTree
    (w8ste/leader-keys
      "n" '(:ignore t :wk "Neotree")
      "nt" '(neotree-toggle :wk "Toggle Neotree")
      "nc" '(neotree-create-node :wk "Create File")
      "nd" '(neotree-delete-node :wk "Delete File"))

        ;;Pytest
    (w8ste/leader-keys
        "c" '(:ignore t :wk "PyTest")
        "ca" '(pytest-all :wk "All")
        "cm" '(pytest-module :wk "Module")
          "co" '(pytest-one :wk "One")
          "cr" '(pytest-run :wk "Run")
          "cc" '(pytest-again :wk "Again")
          "cd" '(pytest-directory :wk "Directory")
          "cpa" '(pytest-pdb-all :wk "pdb All")
          "cpm" '(pytest-pdb-module :wk "pdb Module")
          "cpp" '(pytest-pdb-one :wk "pdb One"))
    )
  ;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)
#+end_src

** General settings
#+begin_src emacs-lisp
  ;; Disable backup files.
  (setf make-backup-files nil)
  ;; Prompt to delete autosaves when killing buffers.
  (setf kill-buffer-delete-auto-save-files t)

  (global-visual-line-mode 0)
  (toggle-truncate-lines 0)
#+end_src

* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* AUCTex
#+begin_src emacs-lisp

  (use-package auctex
  :mode
  ("\\.tex\\'" . tex-mode)
  :hook
  ((tex-mode . lsp-deferred)
  (tex-mode . (lambda ()
  (push (list 'output-pdf "Zathura")
  TeX-view-program-selection)))))

	   (setq TeX-view-program-selection '((output-pdf "Zathura"))
      TeX-source-correlate-start-server t)
#+end_src




* Autopair
#+begin_src emacs-lisp
  (use-package smartparens
    :init
    (smartparens-global-mode))
#+end_src

* Buffer-Move
#+begin_src emacs-lisp
  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
    ;;  "Switches between the current buffer, and the buffer above the
    ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
    "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
           (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
    "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
    "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win)))) 
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content t) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* Diminish
Option that implements hiding of minor-modes in the modeline
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired-open
    :config
    (setq dired-open-extensions '(("gif" . "sxiv")
                                  ("jpg" . "sxiv")
                                  ("png" . "sxiv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))

  (use-package peep-dired
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
    )
#+end_src

* Disord status
#+begin_src emacs-lisp
  (use-package elcord
    :init
    (elcord-mode))
#+end_src

* Eshell
#+begin_src emacs-lisp
  (defun make-shell (name)
    "Create a shell buffer named NAME."
    (interactive "sName: ")
    (setq name (concat "$" name))
    (eshell)
    (rename-buffer name))

#+end_src

* FONTS
** Settings The Font Face
#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono Medium 19")
  (set-face-attribute 'default nil
                      :font "JetBrains Mono Medium"
                      :height 110
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "JetBrains Mono Medium"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono Medium"
                      :height 110
                      :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono Medium 12"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

* Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init
    (add-hook 'c++-mode-hook
              (lambda () (setq flycheck-clang-language-standard "c++17"))) 
    (setq flycheck-clang-language-standard "c++17")
    (global-flycheck-mode)) 
#+end_src

* Git Programms
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :diminish)
#+end_src

* GUI Settings
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (global-visual-line-mode t)
#+end_src

* Gradle-Mode
#+begin_src emacs-lisp
  (use-package gradle-mode)
#+end_src

* Highlight Indents
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
  :config
  (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  (add-hook 'c++-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'java-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

* Highlight
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook ((org-mode . hl-todo-mode)
           (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* Identation
#+begin_src emacs-lisp
; START TABS CONFIG
;; Create a variable for our preferred tab width
(setq custom-tab-width 4)

;; Two callable functions for enabling/disabling tabs in Emacs
(defun disable-tabs () (setq indent-tabs-mode nil))
(defun enable-tabs  ()
  (local-set-key (kbd "TAB") 'tab-to-tab-stop)
  (setq indent-tabs-mode t)
  (setq tab-width custom-tab-width))

;; Hooks to Enable Tabs
(add-hook 'prog-mode-hook 'enable-tabs)
;; Hooks to Disable Tabs
(add-hook 'lisp-mode-hook 'enable-tabs)
(add-hook 'emacs-lisp-mode-hook 'enable-tabs)
(enable-tabs)
;; Language-Specific Tweaks
(setq-default python-indent-offset custom-tab-width) ;; Python
(setq-default js-indent-level custom-tab-width)      ;; Javascript
(setq-default scala-indent-level custom-tab-width) 
;; Making electric-indent behave sanely
(setq-default electric-indent-inhibit t)

;; Make the backspace properly erase the tab instead of
;; removing 1 space at a time.
(setq backward-delete-char-untabify-method 'hungry)

;; (OPTIONAL) Shift width for evil-mode users
;; For the vim-like motions of ">>" and "<<".
(setq-default evil-shift-width custom-tab-width)

; END TABS CONFIG
#+end_src

* IVY (Counsel)
#+begin_src emacs-lisp
(use-package counsel
  :bind (("C-x b" . 'counsel-ibuffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

    (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))

  (use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src

* Language Support
** Lsp mode

  (use-package lsp-mode
         :init
         ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
         (setq lsp-keymap-prefix "C-c l")
         ;;(setq lsp-modeline-diagnostics-enable nil)
         :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
                (LaTeX-mode . lsp-deferred)
                ;; if you want which-key integration
                (lsp-mode . lsp-enable-which-key-integration))
         :commands (lsp lsp-deferred))

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-modeline-diagnostics-enable nil)
    :hook (lsp-after-apply-edits-hook t
         ;; replace XXX-mode with concrete major-mode(e. g. python-mode)
                (LaTeX-mode . lsp-deferred)
                ;; if you want which-key integration
                (lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    ;; enable / disable the hints as you prefer:
    (lsp-inlay-hint-enable t)
    ;; These are optional configurations. See https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#lsp-rust-analyzer-display-chaining-hints for a full list
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'c++-mode-hook 'lsp)
    (add-hook 'java-mode-hook 'lsp)
    (add-hook 'sh-mode-hook 'lsp)
    (add-hook 'tex-mode-hook 'lsp)
    ;; (lsp-enable-whichkey-integration t)
    (lsp))



       (use-package lsp-latex
         ;; this uses texlab
         :ensure t
         :config
         (progn
           (add-hook 'bibtex-mode-hook 'lsp)
           )
         )

         ;; this uses texlab
    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))

    (use-package lsp-treemacs
      :after lsp)

    (use-package lsp-ivy
      :after lsp)

#+end_src

** Company
#+begin_src emacs-lisp
    (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("C-u" . company-complete-selection)
           ("C-j" . company-select-next)
           ("C-k" . company-select-previous))
          (:map lsp-mode-map
           ("C-i" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Dap Mode
#+begin_src emacs-lisp
(use-package dap-mode
  ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; :custom
  ;; (lsp-enable-dap-auto-configure nil)
  ;; :config
  ;; (dap-ui-mode 1)
  :commands dap-debug
  :config
  ;; Set up Node debugging
  (require 'dap-node)
  (dap-node-setup)) ;; Automatically installs Node debug adapter if needed
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src
** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred))
#+end_src

** Python
#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))
#+end_src

Create the virtualenv in your Project Folder called "venv"
#+begin_src emacs-lisp
  (use-package auto-virtualenv
  :ensure t
  :init
  (use-package pyvenv
    :ensure t)
  :config
  (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
  (add-hook 'projectile-after-switch-project-hook 'auto-virtualenv-set-virtualenv)  ;; If using projectile
  )
#+end_src

PyTest 
#+begin_src emacs-lisp
  (use-package pytest)
#+end_src

** System Verilog
#+begin_src emacs-lisp
  (use-package verilog-mode
    :ensure t
    :hook (verilog-mode . (lambda ()
                            (require 'verilog-mode)
                            (lsp))))

#+end_src

** C++
#+begin_src emacs-lisp
  (use-package ccls
    :ensure t
    :config
    (setq ccls-executable "ccls")
    (setq lsp-prefer-flymake nil)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    :hook ((c-mode c++-mode objc-mode) .
           (lambda () (require 'ccls) (lsp))))

   ;;; This will enable emacs to compile a simple cpp single file without any makefile by just pressing [f9] key
  (defun code-compile()
    (interactive)
    (unless (file-exists-p "Makefile")
      (set (make-local-variable 'compile-command)
           (let ((file (file-name-nondirectory buffer-file-name)))
             (format "%s -o %s %s"
                     (if (equal (file-name-extension file) "cpp") "g++" "gcc")
                     (file-name-sans-extension file)
                     file)))
      (compile compile-command)))
  (global-set-key [f9] 'code-compile) 
#+end_src

** ltex
 (use-package lsp-ltex
  :ensure t
  :hook (text-mode . (lambda ()
                       (require 'lsp-ltex)
                       (lsp)))  ; or lsp-deferred
  :init
  (setq lsp-ltex-version "14.0.0"))  ; make sure you have set this, see below

** Scala
#+begin_src emacs-lisp

  (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$")

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))

  (use-package lsp-metals
    :ensure t
    :custom
    ;; You might set metals server options via -J arguments. This might not always work, for instance when
    ;; metals is installed using nix. In this case you can use JAVA_TOOL_OPTIONS environment variable.
    (lsp-metals-server-args '(;; Metals claims to support range formatting by default but it supports range
                              ;; formatting of multiline strings only. You might want to disable it so that
                              ;; emacs can use indentation provided by scala-mode.
                              "-J-Dmetals.allow-multiline-string-formatting=off"
                              ;; Enable unicode icons. But be warned that emacs might not render unicode
                              ;; correctly in all cases.
                              "-J-Dmetals.icons=unicode"))
    ;; In case you want semantic highlighting. This also has to be enabled in lsp-mode using
    ;; `lsp-semantic-tokens-enable' variable. Also you might want to disable highlighting of modifiers
    ;; setting `lsp-semantic-tokens-apply-modifiers' to `nil' because metals sends `abstract' modifier
    ;; which is mapped to `keyword' face.
    (lsp-metals-enable-semantic-highlighting t)
    :hook (scala-mode . lsp))
#+end_src

** Dart
#+begin_src emacs-lisp

(setq package-selected-packages 
  '(dart-mode lsp-mode lsp-dart lsp-treemacs flycheck company
    ;; Optional packages
    lsp-ui company hover))

(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (mapc #'package-install package-selected-packages))

(add-hook 'dart-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024))

#+end_src

* Minibuffer Escape
#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit) 
#+end_src

* Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35      ;; sets modeline height
          doom-modeline-bar-width 5    ;; sets right bar width
          doom-modeline-persp-name t   ;; adds perspective name to modeline
          doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

* Neotree
#+begin_src emacs-lisp
  (use-package neotree
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 37
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action) 
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
              #'(lambda (_)
                  (with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil)))))
#+end_src

* Org Mode
** Enable ToC
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    (setq org-agenda-start-on-weekday 1)
    (setq org-agenda-files (list "~/University/uni.org")))
#+end_src

** Enable bullet points
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Disable electric indent
#+begin_src emacs_lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indention 1)
#+end_src

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* PDF-Tool
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t)
#+end_src
* Perspective
#+begin_src emacs-lisp
  (use-package perspective
    :custom
    ;; NOTE! I have also set 'SCP =' to open the perspective menu.
    ;; I'm only setting the additional binding because setting it
    ;; helps suppress an annoying warning message.
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init 
    (persp-mode)
    :config
    ;; Sets a file to write to when we save states
    (setq persp-state-default-file "~/.config/emacs/sessions"))

  ;; This will group buffers by persp-name in ibuffer.
  (add-hook 'ibuffer-hook
            (lambda ()
              (persp-ibuffer-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))

  ;; Automatically save perspective states to file when Emacs exits.
  (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

* Projectile
Projectile is a project interaction library for Emacs.
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)) 
#+end_src

* Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)))
#+end_src

* Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

* Rustic Mode
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))
  (use-package rustic
    :ensure
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run c-c c-c c-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))
                           #+end_src
* Shells and Terminals
** Eshell
Shell written in emacs-lisp
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
** Vterm
Terminal emulator in emacs
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/bin/fish"
          vterm-max-scrollback 5000))
#+end_src
** Vterm-toggle
Helps toggling vterm
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src
* Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (w8ste/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-tokyo-night t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* TLDR
#+begin_src emacs-lisp
  (use-package tldr)
#+end_src

* Transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

* Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :init
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  (use-package tree-sitter-langs)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil 
          which-key-separator " → " ))
#+end_src

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((LaTeX-mode . yas-minor-mode)
           (post-self-insert . my/yas-try-expanding-auto-snippets)))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))
#+end_src

#+begin_src emacs-lisp
(defun unbind-shift-keybindings ()
  "Unbind all keybindings containing the Shift key."
  (interactive)
  (let ((shift-key-prefixes '("S-" "s-")))
    (mapc (lambda (keymap)
            (mapc (lambda (prefix)
                    (mapc (lambda (key)
                            (define-key keymap (kbd (concat prefix key)) nil))
                          '("!" "\"" "#" "$" "%" "&" "'" "(" ")" "*"
                            "+" "," "-" "." "/" ":" ";" "<" "=" ">" "?"
                            "@" "[" "\\" "]" "^" "_" "`" "{" "|" "}" "~"
                            "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
                            "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
                            "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
                            "U" "V" "W" "X" "Y" "Z")))
                  shift-key-prefixes))
          (list global-map (current-local-map)))))

#+end_src
